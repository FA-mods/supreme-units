@using IgniteUI.Blazor.Controls
@using FAF
@inject IIgniteUIBlazor IgniteUIBlazor
@inject FAF.BlueprintStats BP
@inject FAF.WebService WebService

@page "/chart"
@page "/"

@*<PageTitle>Index</PageTitle>*@
 
@*<SurveyPrompt Title="How is Blazor working for you?" />*@

<div class="container vertical fill">
    <div class="legend-title" style="text-align: center;">
        Chart - Supreme Commander Units 
    </div>
   @* <button onclick=""></button>*@
  @*  <div class="legend">
        <IgbLegend
        Orientation="LegendOrientation.Horizontal"
        Name="Legend"
        @ref="legend">
        </IgbLegend>
    </div>*@

       @* *@

    <div class="container vertical fill">
        <IgbDataChart 
           @ref="chart"
           Name="chart" Height="600px"
           SeriesMouseEnterScript="onSeriesMouseEnter"
           IsHorizontalZoomEnabled="true" IsVerticalZoomEnabled="true"
           Brushes="@Brushes" Outlines="@Brushes" MarkerOutlines="@Brushes" MarkerBrushes="@Brushes">

               <IgbNumericXAxis Name="xAxis" @ref="xAxis" 
               TitleTextColor="Black" TitleFontSize="12" TitleTopMargin="5"
                    StrokeThickness="1" Stroke="Gray"
                    IsLogarithmic="true"
                    AbbreviateLargeNumbers="true"   >
               </IgbNumericXAxis>
                
               @* *@
               <IgbNumericYAxis Name="yAxis" @ref="yAxis" 
                    TitleTextColor="Black" TitleFontSize="12"
                    TitleRightMargin="0"
                    TitleLeftMargin="0"
                    StrokeThickness="1.5" Stroke="Gray"
                    LabelExtent="50"
                    IsLogarithmic="true"  
                    AbbreviateLargeNumbers="true">
               </IgbNumericYAxis>
               
             @*   <IgbCrosshairLayer 
                Name="CrosshairLayer"
                IsAxisAnnotationEnabled="true"   
                XAxisAnnotationInterpolatedValuePrecision="1"
                YAxisAnnotationInterpolatedValuePrecision="1" />*@
           
           @*    <IgbDataToolTipLayer
                       Name="DataToolTipLayer"
                       @ref="dataToolTipLayer">
               </IgbDataToolTipLayer>
*@
              @* 
                   TitleLeftMargin="10"  Stroke="Black"
                   TitleRightMargin="0"
                   LabelLeftMargin="0"
               
               <IgbBubbleSeries
               XAxisName="xAxis"
               YAxisName="yAxis"
               XMemberPath="Economy.BuildTime"
               YMemberPath="Economy.BuildCostMass"
               RadiusMemberPath="Economy.BuildCostMass"

               MarkerType="MarkerType.Circle"
               MarkerThickness="2"
               MarkerBrush="#3eca3e"
               MarkerOutline="#3eca3e"
               DataSource="Units"
               MarkerFillOpacity="0.5"
               ShowDefaultTooltip="true" 
            *@
       
           </IgbDataChart>

    </div>
     
    @*<div class="legend-title">
        FAF Bottom
    </div>*@
</div>

@code {

    private IgbLegend legend;
    private IgbDataChart chart;
    private IgbNumericXAxis xAxis; 
    private IgbNumericYAxis yAxis;  
    private IgbDataToolTipLayer dataToolTipLayer;

    private string Factions = "UEF, Cybran, Aeon, Seraphim, Nomads, UNKNOWN";
    private string Brushes = "#1174ed, #eb2c1e, #19d113, #d1bb13, #874b01, #292828";

    private Action BindElements { get; set; }


    private List<Blueprint> UnitBlueprints = new List<Blueprint>(); 
    private List<BlueprintGroup> UnitGroups = new List<BlueprintGroup>(); 

    DateTime RenStart = DateTime.Now;
    protected override async Task OnInitializedAsync()
    {
        TaskUtils.Start("OnInitializedAsync"); 
        //var Start = DateTime.Now;

        //UnitBlueprints = await BP.Load();
        //UnitGroups = BP.GroupBy(UnitBlueprints, "Filters.Faction");
        //var unitGroups = BP.GroupBy(UnitBlueprints, "General.FactionName");
        //var unitGroups = BP.GroupBy(UnitBlueprints, "General.Classification");
        //var unitGroups = BP.GroupBy(UnitBlueprints, "Type");
        //var unitGroups = BP.GroupBy(UnitBlueprints, "Type"); 
        // SyncChart();

        //var Stop = DateTime.Now;
        //Console.WriteLine("FAF OnInitializedAsync " + Stop.Subtract(Start).TotalMilliseconds);


        TaskUtils.Stop("OnInitializedAsync");
        await Task.Delay(1);

    }

    protected void SyncChart()
    {    

        if (this.UnitGroups == null) return;   
        if (this.UnitGroups.Count == 0) return; 

        if (this.chart == null) return;    
        // if (this.chart.Series.Count > 0) return;
        if (this.chart.Series.Count >= this.UnitGroups.Count) return;

        //if (this.UnitBlueprints == null) return;   
        //if (this.UnitBlueprints.Count == 0) return; 


        //   BP.ChartStart = DateTime.Now;
        //  Console.WriteLine("FAF SyncChart " );
        Console.WriteLine("FAF SyncChart groups=" + this.UnitGroups.Count);

        foreach (var group in this.UnitGroups)
        { 
            AddSeries(group.Units, group.Title);
        }

        //AddSeries(UnitBlueprints, "UnitBlueprints");

        //BP.ChartStop = DateTime.Now;
        // Console.WriteLine("FAF SyncChart " + BP.ChartStop.Subtract(BP.ChartStart).TotalMilliseconds);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        TaskUtils.Start("OnAfterRenderAsync");
        Web.Service = WebService;

        // Console.WriteLine("FAF OnAfterRenderAsync");

        var Start = DateTime.Now;
        var legend = this.legend;
        var chart = this.chart;
        var xAxis = this.xAxis;
        var yAxis = this.yAxis;

        //  var dataToolTipLayer = this.dataToolTipLayer;

        //this.BindElements = () => {
        //    chart.Legend = this.legend;
        //};
        //this.BindElements();

        if (firstRender)
        {
            var website = Web.Service.Local.BaseUri;
            //var website = Web.Service.Local.Uri;
            Console.WriteLine("website " + website);

            //var url = website + "data/bp-extracted.json"; 
            var url = website + "data/bp-extracted-small.json";              
            var units = await BlueprintData.Load(url);
            var groups = BlueprintData.GroupBy(units, "FactionName");
            var item1 = units[0];
            var item2 = units[20];
            var item3 = units[50];

            foreach (var group in groups)
            {
                var unitGroup = new BlueprintGroup();
                unitGroup.Title = group.Title;

                foreach (var unit in group.Units)
                {
                    var item = new Blueprint();
                    item.Economy = unit.Economy;
                    item.Defense = unit.Defense;
                    item.Id = unit.Id;
                    //   item.General.FactionName = unit.General.FactionName;
                    item.General.FactionIndex = unit.General.FactionIndex;

                    unitGroup.Units.Add(item);
                    //this.UnitBlueprints.Add(item);
                    //if (unit.Id.Contains("UNK"))
                    //{
                    //    Console.WriteLine("FAF " + unit.Id + " " + unit.Description);
                    //}
                }
                this.UnitGroups.Add(unitGroup);
            }

            // this.UnitGroups = BlueprintData.GroupBy(UnitBlueprints, "FactionName");

            SyncChart();
        }


        SyncChart();

        //var Stop = DateTime.Now;
        //Console.WriteLine("FAF OnAfterRenderAsync " + Stop.Subtract(RenStart).TotalMilliseconds);

        TaskUtils.Stop("OnAfterRenderAsync");
        await Task.Delay(1);
    }


    public void AddSeries(List<Blueprint> units, string faction) 
    {  
        //var units = UnitBlueprints.Where(x => x.General.FactionName == faction).ToList();
        //Console.WriteLine("FAF BP " + faction + "=" + units.Count);
        // var Start = DateTime.Now;
        TaskUtils.Start("AddSeries");

        // var first = units[0];
        // first.Economy.BuildTime

        var scale = new IgbSizeScale();
        scale.MinimumValue = 10;
        scale.MaximumValue = 50;

        //var s = new IgbBubbleSeries();
        var s = new IgbScatterSeries();
        s.Name = "Series" + this.chart.Series.Count;

        //s.XMemberAsLegendLabel = "Build Time";
        //s.YMemberAsLegendLabel = "Build Cost";
        //s.RadiusMemberAsLegendLabel = "BuildRate";
        s.XAxisName = "xAxis";
        s.YAxisName = "yAxis";
        // s.XMemberPath = "Economy.BuildTime";
        //s.XMemberPath = "Economy.BuildTime";
        s.XMemberPath = "Economy.BuildTime";
        //s.YMemberPath = "FactionIndex";
        //s.YMemberPath = "Economy.BuildCostMass";
        s.YMemberPath = "General.FactionIndex";

        ////s.XMemberPath = "[EconomyBuildCostMass]";
        ////s.YMemberPath = "[GeneralFactionIndex]";
        //s.XMemberPath = "EconomyBuildCostMass";
        //s.YMemberPath = "GeneralFactionIndex";

        //s.RadiusMemberPath = "Economy.BuildRate";

        // s.MarkerType="MarkerType.Circle"
        // s.MarkerThickness="2"
        //s.MarkerBrush = color;
        //s.MarkerOutline = color;
        s.MaximumMarkers = 1000;
        s.DataSource = units;
        //  s.MarkerFillOpacity = 0.5;
        //   s.ShowDefaultTooltip = true;
        s.Title = faction + " (" + units.Count + ")";
        s.ShowDefaultTooltip = true;
        //s.RadiusScale = scale;

        if (!string.IsNullOrEmpty(s.YMemberPath)) this.yAxis.Title = s.YMemberPath.Replace(".", " ");
        if (!string.IsNullOrEmpty(s.XMemberPath)) this.xAxis.Title = s.XMemberPath.Replace(".", " ");

        if (s.YMemberPath == "General.FactionIndex")
        {
            this.yAxis.IsLogarithmic = false;
            this.yAxis.MinimumValue = 0;
            this.yAxis.MaximumValue = 6;
            this.yAxis.Interval = 1;
        }

        this.chart.Series.Add(s);

        //   var Stop = DateTime.Now;
         //   Console.WriteLine("FAF AddSeries " + Stop.Subtract(Start).TotalMilliseconds);
        TaskUtils.Stop("AddSeries");
        
    }
}